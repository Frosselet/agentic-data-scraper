[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agentic-data-scraper"
version = "0.1.0"
description = "A multi-agentic Python solution for building standardized data pipelines that generate AWS Lambda code"
authors = [
    {name = "Development Team", email = "dev@example.com"}
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.12"
keywords = ["data", "scraping", "agents", "pipeline", "aws", "lambda"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Scientific/Engineering :: Information Analysis",
]

dependencies = [
    # Core framework
    "pydantic>=2.8.0",
    "baml-py>=0.60.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "typer>=0.12.0",
    
    # Web scraping
    "playwright>=1.45.0",
    "httpx>=0.27.0",
    "beautifulsoup4>=4.12.0",
    "selenium>=4.23.0",
    
    # Data processing
    "polars>=1.4.0",
    "pandas>=2.2.0,<2.3.0",
    "pyarrow>=17.0.0",
    "numpy>=1.24.0,<2.0.0",
    
    # Semantic web
    "rdflib>=7.0.0",
    "owlready2>=0.46",
    "sparqlwrapper>=2.0.0",
    
    # AWS integration
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "awscli>=1.33.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "structlog>=24.2.0",
    "tenacity>=8.5.0",
    "aiofiles>=24.1.0",
    "asyncio-throttle>=1.0.2",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    
    # Linting and formatting
    "ruff>=0.5.0",
    "mypy>=1.11.0",
    "pre-commit>=3.8.0",
    
    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
    
    # Development tools - Jupyter ecosystem
    "ipython>=8.26.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.2.0",
    "notebook>=7.2.0",
    "ipykernel>=6.29.0",
    "matplotlib>=3.8.0,<3.10.0",
    "seaborn>=0.12.0,<0.14.0",
]

lambda = [
    # Lambda-specific optimized versions
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    # Exclude heavy dependencies for Lambda
]

semantic = [
    # KuzuDB graph database (primary graph engine)
    "kuzu>=0.1.0",
    "pyarrow>=17.0.0",  # Required for KuzuDB performance
    
    # Modern graph visualization stack
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "jinja2>=3.1.0",
    "plotly>=5.17.0",
    "bokeh>=3.3.0",
    
    # Minimal NetworkX (only for specific algorithms not yet in KuzuDB)
    "networkx>=3.3",
    
    # Additional semantic web tools
    "pyshacl>=0.25.0",
    "ontospy>=2.1.0",
]

graph_viz = [
    # Interactive web-based graph visualization
    "dash>=2.14.0",
    "dash-cytoscape>=0.3.0",
    "dash-bootstrap-components>=1.5.0",
    "streamlit>=1.28.0",
    
    # 4D visualization capabilities
    "plotly>=5.17.0",
    "bokeh>=3.3.0",
    "altair>=5.2.0",
    "holoviews>=1.18.0",
    "panel>=1.3.0",
]

all = [
    "agentic-data-scraper[dev,lambda,semantic,graph_viz]"
]

[project.urls]
Homepage = "https://github.com/example/agentic-data-scraper"
Documentation = "https://example.github.io/agentic-data-scraper"
Repository = "https://github.com/example/agentic-data-scraper.git"
Issues = "https://github.com/example/agentic-data-scraper/issues"

[project.scripts]
agentic-scraper = "agentic_data_scraper.cli.main:app"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
agentic_data_scraper = ["py.typed"]

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip without an explicit strict parameter
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]
"scripts/**/*" = ["T201"]

[tool.ruff.isort]
known-first-party = ["agentic_data_scraper"]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "baml_py.*",
    "playwright.*",
    "rdflib.*",
    "owlready2.*",
    "sparqlwrapper.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=agentic_data_scraper",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
# asyncio_mode = "auto"  # Removed - requires pytest-asyncio

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[dependency-groups]
dev = [
    "pytest-cov>=6.2.1",
]
