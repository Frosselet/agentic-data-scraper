# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (21)
# #########################################################################

class AgriculturePipelineConfig(BaseModel):
    ontologies: typing.List[str]
    data_sources: typing.List[str]
    quality_thresholds: typing.Dict[str, float]

class BusinessContext(BaseModel):
    question: typing.Optional[str] = None
    success_criteria: typing.Optional[str] = None
    timeline: typing.Optional[str] = None
    budget: typing.Optional[str] = None
    risk_tolerance: typing.Optional[str] = None
    persona_id: typing.Optional[str] = None
    interaction_level: typing.Optional[str] = None

class CongestionAlert(BaseModel):
    location: typing.Optional[str] = None
    river_mile: typing.Optional[float] = None
    severity: typing.Optional[types.RiskLevel] = None
    estimated_delay_hours: typing.Optional[float] = None
    affected_vessels: typing.Optional[int] = None
    alternative_routes: typing.List[str]
    cost_impact_percent: typing.Optional[float] = None

class DataContract(BaseModel):
    source_requirements: typing.List[str]
    validation_rules: typing.List[str]
    transformation_specs: typing.List[str]
    quality_thresholds: typing.Dict[str, float]
    security_requirements: typing.List[str]
    compliance_rules: typing.List[str]

class DataSource(BaseModel):
    type: typing.Optional[str] = None
    url: typing.Optional[str] = None
    authentication_type: typing.Optional[str] = None
    access_patterns: typing.List[str]
    rate_limits: typing.Optional[int] = None
    documentation_url: typing.Optional[str] = None

class DataSourceRecommendation(BaseModel):
    name: typing.Optional[str] = None
    type: typing.Optional[str] = None
    description: typing.Optional[str] = None
    feasibility_score: typing.Optional[float] = None
    cost_estimate: typing.Optional[str] = None
    implementation_effort: typing.Optional[str] = None
    platform_compatibility: typing.Optional[float] = None
    data_quality_expected: typing.Optional[float] = None
    access_requirements: typing.List[str]
    sample_data_url: typing.Optional[str] = None
    documentation_url: typing.Optional[str] = None
    pros: typing.List[str]
    cons: typing.List[str]
    semantic_vocabularies: typing.List[str]

class FeasibilityAnalysis(BaseModel):
    overall_feasibility: typing.Optional[str] = None
    technical_risks: typing.List[str]
    business_risks: typing.List[str]
    mitigation_strategies: typing.List[str]
    platform_gaps: typing.List[str]
    recommended_alternatives: typing.List[str]
    estimated_timeline_weeks: typing.Optional[int] = None
    confidence_level: typing.Optional[float] = None

class GeneratedPipeline(BaseModel):
    lambda_code: typing.Optional[str] = None
    deployment_config: typing.Optional[str] = None
    monitoring_code: typing.Optional[str] = None
    validation_code: typing.Optional[str] = None
    documentation: typing.Optional[str] = None
    test_cases: typing.List[str]

class MarketOpportunity(BaseModel):
    commodity: typing.Optional[str] = None
    origin_price: typing.Optional[float] = None
    destination_price: typing.Optional[float] = None
    arbitrage_potential: typing.Optional[float] = None
    transport_cost: typing.Optional[float] = None
    net_profit_per_ton: typing.Optional[float] = None
    market_window_days: typing.Optional[int] = None
    confidence_level: typing.Optional[float] = None

class NavigationRecommendation(BaseModel):
    recommended_route: typing.Optional["RouteOption"] = None
    alternative_routes: typing.List["RouteOption"]
    risk_factors: typing.List[str]
    cost_analysis: typing.Dict[str, float]
    timing_considerations: typing.List[str]
    weather_alerts: typing.List[str]
    market_insights: typing.List[str]
    action_items: typing.List[str]
    decision_rationale: typing.Optional[str] = None

class ParsedData(BaseModel):
    format: typing.Optional[str] = None
    schema: typing.Dict[str, str]
    quality_score: typing.Optional[float] = None
    anomalies: typing.List[str]
    encoding: typing.Optional[str] = None
    size_mb: typing.Optional[float] = None

class RouteOption(BaseModel):
    route_id: typing.Optional[str] = None
    transport_mode: typing.Optional[types.TransportMode] = None
    total_distance_miles: typing.Optional[float] = None
    estimated_travel_time_hours: typing.Optional[float] = None
    total_cost_usd: typing.Optional[float] = None
    risk_assessment: typing.Optional[types.RiskLevel] = None
    fuel_cost: typing.Optional[float] = None
    lock_fees: typing.List[float]
    delay_probability: typing.Optional[float] = None
    confidence_score: typing.Optional[float] = None
    route_segments: typing.List[str]
    alternative_modes: typing.List[str]
    cost_breakdown: typing.Dict[str, float]

class RoutingRequest(BaseModel):
    origin_port: typing.Optional[str] = None
    destination_port: typing.Optional[str] = None
    commodity: typing.Optional[str] = None
    quantity_tons: typing.Optional[float] = None
    departure_time: typing.Optional[str] = None
    priority: typing.Optional[types.NavigationPriority] = None
    max_delay_hours: typing.Optional[int] = None
    budget_constraint: typing.Optional[float] = None
    vessel_specs: typing.Optional["VesselSpecifications"] = None

class SOWContract(BaseModel):
    project_title: typing.Optional[str] = None
    executive_summary: typing.Optional[str] = None
    business_objectives: typing.List[str]
    success_metrics: typing.List[str]
    data_sources: typing.List["DataSourceRecommendation"]
    technical_approach: typing.Optional[str] = None
    deliverables: typing.List[str]
    timeline_weeks: typing.Optional[int] = None
    cost_estimate: typing.Optional[str] = None
    risk_assessment: typing.Optional[str] = None
    acceptance_criteria: typing.List[str]
    semantic_framework: typing.Optional[str] = None

class SecurityDecision(BaseModel):
    risk_level: typing.Optional[str] = None
    decision_required: typing.Optional[str] = None
    context: typing.Optional[str] = None
    recommended_action: typing.Optional[str] = None
    human_approval_needed: typing.Optional[bool] = None

class SemanticAnnotation(BaseModel):
    ontology_mappings: typing.Dict[str, str]
    skos_concepts: typing.List[str]
    owl_alignments: typing.List[str]
    semantic_quality_score: typing.Optional[float] = None
    domain_coverage: typing.Optional[float] = None
    linked_entities: typing.List[str]

class SupplyChainPipelineConfig(BaseModel):
    ontologies: typing.List[str]
    data_sources: typing.List[str]
    quality_thresholds: typing.Dict[str, float]

class TradingPipelineConfig(BaseModel):
    ontologies: typing.List[str]
    data_sources: typing.List[str]
    quality_thresholds: typing.Dict[str, float]

class TransformationStrategy(BaseModel):
    source_schema: typing.Dict[str, str]
    target_schema: typing.Dict[str, str]
    transformation_rules: typing.List[str]
    validation_logic: typing.List[str]
    performance_optimizations: typing.List[str]
    error_handling: typing.List[str]

class VesselSpecifications(BaseModel):
    vessel_id: typing.Optional[str] = None
    vessel_type: typing.Optional[str] = None
    length: typing.Optional[float] = None
    width: typing.Optional[float] = None
    draft: typing.Optional[float] = None
    cargo_capacity: typing.Optional[float] = None
    current_load: typing.Optional[float] = None
    fuel_consumption: typing.Optional[float] = None

class WaterwayConditions(BaseModel):
    water_level: typing.Optional[float] = None
    flow_rate: typing.Optional[float] = None
    navigation_status: typing.Optional[str] = None
    ice_conditions: typing.Optional[str] = None
    weather_impact: typing.Optional[str] = None
    lock_delays: typing.List[int]
    depth_restrictions: typing.List[float]

# #########################################################################
# Generated type aliases (0)
# #########################################################################
