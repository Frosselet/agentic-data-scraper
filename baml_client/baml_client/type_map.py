# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

from . import types
from . import stream_types


type_map = {

    "types.AgriculturePipelineConfig": types.AgriculturePipelineConfig,
    "stream_types.AgriculturePipelineConfig": stream_types.AgriculturePipelineConfig,

    "types.AlignmentScore": types.AlignmentScore,
    "stream_types.AlignmentScore": stream_types.AlignmentScore,

    "types.BusinessContext": types.BusinessContext,
    "stream_types.BusinessContext": stream_types.BusinessContext,

    "types.CellMove": types.CellMove,
    "stream_types.CellMove": stream_types.CellMove,

    "types.CongestionAlert": types.CongestionAlert,
    "stream_types.CongestionAlert": stream_types.CongestionAlert,

    "types.DataBusinessCanvas": types.DataBusinessCanvas,
    "stream_types.DataBusinessCanvas": stream_types.DataBusinessCanvas,

    "types.DataContract": types.DataContract,
    "stream_types.DataContract": stream_types.DataContract,

    "types.DataSource": types.DataSource,
    "stream_types.DataSource": stream_types.DataSource,

    "types.DataSourceMetadata": types.DataSourceMetadata,
    "stream_types.DataSourceMetadata": stream_types.DataSourceMetadata,

    "types.DataSourceRecommendation": types.DataSourceRecommendation,
    "stream_types.DataSourceRecommendation": stream_types.DataSourceRecommendation,

    "types.DiscoveryResult": types.DiscoveryResult,
    "stream_types.DiscoveryResult": stream_types.DiscoveryResult,

    "types.ETKLCoordinationPlan": types.ETKLCoordinationPlan,
    "stream_types.ETKLCoordinationPlan": stream_types.ETKLCoordinationPlan,

    "types.ETKLManifestoCompliance": types.ETKLManifestoCompliance,
    "stream_types.ETKLManifestoCompliance": stream_types.ETKLManifestoCompliance,

    "types.ETKLPrincipleViolation": types.ETKLPrincipleViolation,
    "stream_types.ETKLPrincipleViolation": stream_types.ETKLPrincipleViolation,

    "types.ETKLVisionAssessment": types.ETKLVisionAssessment,
    "stream_types.ETKLVisionAssessment": stream_types.ETKLVisionAssessment,

    "types.ETKLWorkStreamAnalysis": types.ETKLWorkStreamAnalysis,
    "stream_types.ETKLWorkStreamAnalysis": stream_types.ETKLWorkStreamAnalysis,

    "types.ExecutiveTarget": types.ExecutiveTarget,
    "stream_types.ExecutiveTarget": stream_types.ExecutiveTarget,

    "types.FeasibilityAnalysis": types.FeasibilityAnalysis,
    "stream_types.FeasibilityAnalysis": stream_types.FeasibilityAnalysis,

    "types.GeneratedPipeline": types.GeneratedPipeline,
    "stream_types.GeneratedPipeline": stream_types.GeneratedPipeline,

    "types.KnownSourceRequest": types.KnownSourceRequest,
    "stream_types.KnownSourceRequest": stream_types.KnownSourceRequest,

    "types.MarketOpportunity": types.MarketOpportunity,
    "stream_types.MarketOpportunity": stream_types.MarketOpportunity,

    "types.NavigationRecommendation": types.NavigationRecommendation,
    "stream_types.NavigationRecommendation": stream_types.NavigationRecommendation,

    "types.NotebookSection": types.NotebookSection,
    "stream_types.NotebookSection": stream_types.NotebookSection,

    "types.NotebookStructure": types.NotebookStructure,
    "stream_types.NotebookStructure": stream_types.NotebookStructure,

    "types.ParsedData": types.ParsedData,
    "stream_types.ParsedData": stream_types.ParsedData,

    "types.RouteOption": types.RouteOption,
    "stream_types.RouteOption": stream_types.RouteOption,

    "types.RoutingRequest": types.RoutingRequest,
    "stream_types.RoutingRequest": stream_types.RoutingRequest,

    "types.SOWContract": types.SOWContract,
    "stream_types.SOWContract": stream_types.SOWContract,

    "types.SecurityDecision": types.SecurityDecision,
    "stream_types.SecurityDecision": stream_types.SecurityDecision,

    "types.SemanticAnnotation": types.SemanticAnnotation,
    "stream_types.SemanticAnnotation": stream_types.SemanticAnnotation,

    "types.StoryArc": types.StoryArc,
    "stream_types.StoryArc": stream_types.StoryArc,

    "types.StorytellingPlan": types.StorytellingPlan,
    "stream_types.StorytellingPlan": stream_types.StorytellingPlan,

    "types.SupplyChainPipelineConfig": types.SupplyChainPipelineConfig,
    "stream_types.SupplyChainPipelineConfig": stream_types.SupplyChainPipelineConfig,

    "types.TargetParsingResult": types.TargetParsingResult,
    "stream_types.TargetParsingResult": stream_types.TargetParsingResult,

    "types.TradingPipelineConfig": types.TradingPipelineConfig,
    "stream_types.TradingPipelineConfig": stream_types.TradingPipelineConfig,

    "types.TransformationStrategy": types.TransformationStrategy,
    "stream_types.TransformationStrategy": stream_types.TransformationStrategy,

    "types.VesselSpecifications": types.VesselSpecifications,
    "stream_types.VesselSpecifications": stream_types.VesselSpecifications,

    "types.WaterwayConditions": types.WaterwayConditions,
    "stream_types.WaterwayConditions": stream_types.WaterwayConditions,

    "types.WorkflowPrepopulation": types.WorkflowPrepopulation,
    "stream_types.WorkflowPrepopulation": stream_types.WorkflowPrepopulation,

    "types.ZeroStartDiscovery": types.ZeroStartDiscovery,
    "stream_types.ZeroStartDiscovery": stream_types.ZeroStartDiscovery,


    "types.DataSourceType": types.DataSourceType,

    "types.DiscoveryPath": types.DiscoveryPath,

    "types.NavigationPriority": types.NavigationPriority,

    "types.RiskLevel": types.RiskLevel,

    "types.TargetCategory": types.TargetCategory,

    "types.TargetPriority": types.TargetPriority,

    "types.TransportMode": types.TransportMode,

    "types.UpdateFrequency": types.UpdateFrequency,

}