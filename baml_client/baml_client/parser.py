# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions

from . import stream_types, types
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions

class LlmResponseParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeNotebookStructure(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.NotebookStructure:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeNotebookStructure", llm_response=llm_response, mode="request")
        return typing.cast(types.NotebookStructure, result)

    def AnalyzeSourceFitness(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.Dict[str, str]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeSourceFitness", llm_response=llm_response, mode="request")
        return typing.cast(typing.Dict[str, str], result)

    def AnalyzeWorkStreamCoordination(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["types.ETKLWorkStreamAnalysis"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeWorkStreamCoordination", llm_response=llm_response, mode="request")
        return typing.cast(typing.List["types.ETKLWorkStreamAnalysis"], result)

    def BusinessContextAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.BusinessContext:
        result = self.__options.merge_options(baml_options).parse_response(function_name="BusinessContextAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.BusinessContext, result)

    def CheckManifestoCompliance(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["types.ETKLManifestoCompliance"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CheckManifestoCompliance", llm_response=llm_response, mode="request")
        return typing.cast(typing.List["types.ETKLManifestoCompliance"], result)

    def CongestionManagementAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["types.CongestionAlert"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CongestionManagementAgent", llm_response=llm_response, mode="request")
        return typing.cast(typing.List["types.CongestionAlert"], result)

    def CreateTargetTemplate(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.Dict[str, str]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CreateTargetTemplate", llm_response=llm_response, mode="request")
        return typing.cast(typing.Dict[str, str], result)

    def DataFetcherAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="DataFetcherAgent", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    def DataParserAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ParsedData:
        result = self.__options.merge_options(baml_options).parse_response(function_name="DataParserAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.ParsedData, result)

    def DataTransformerAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TransformationStrategy:
        result = self.__options.merge_options(baml_options).parse_response(function_name="DataTransformerAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.TransformationStrategy, result)

    def DecisionSupportAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="DecisionSupportAgent", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    def DiscoverFromScratch(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.DiscoveryResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="DiscoverFromScratch", llm_response=llm_response, mode="request")
        return typing.cast(types.DiscoveryResult, result)

    def DiscoverKnownSources(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["types.DataSourceMetadata"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="DiscoverKnownSources", llm_response=llm_response, mode="request")
        return typing.cast(typing.List["types.DataSourceMetadata"], result)

    def ETKLGuruAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ETKLVisionAssessment:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ETKLGuruAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.ETKLVisionAssessment, result)

    def EconomicOptimizationAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["types.MarketOpportunity"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="EconomicOptimizationAgent", llm_response=llm_response, mode="request")
        return typing.cast(typing.List["types.MarketOpportunity"], result)

    def FeasibilityAnalyzerAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.FeasibilityAnalysis:
        result = self.__options.merge_options(baml_options).parse_response(function_name="FeasibilityAnalyzerAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.FeasibilityAnalysis, result)

    def GenerateAlignmentFeedback(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.Dict[str, str]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateAlignmentFeedback", llm_response=llm_response, mode="request")
        return typing.cast(typing.Dict[str, str], result)

    def HydrologicalRiskAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.Dict[str, types.RiskLevel]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="HydrologicalRiskAgent", llm_response=llm_response, mode="request")
        return typing.cast(typing.Dict[str, types.RiskLevel], result)

    def JupyterStorytellerAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.StorytellingPlan:
        result = self.__options.merge_options(baml_options).parse_response(function_name="JupyterStorytellerAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.StorytellingPlan, result)

    def MultiModalOptimizationAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["types.RouteOption"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="MultiModalOptimizationAgent", llm_response=llm_response, mode="request")
        return typing.cast(typing.List["types.RouteOption"], result)

    def NavigationIntelligenceAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.NavigationRecommendation:
        result = self.__options.merge_options(baml_options).parse_response(function_name="NavigationIntelligenceAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.NavigationRecommendation, result)

    def OptimizeStoryFlow(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.StorytellingPlan:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OptimizeStoryFlow", llm_response=llm_response, mode="request")
        return typing.cast(types.StorytellingPlan, result)

    def ParseExecutiveTarget(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TargetParsingResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ParseExecutiveTarget", llm_response=llm_response, mode="request")
        return typing.cast(types.TargetParsingResult, result)

    def PersonaResponseAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="PersonaResponseAgent", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    def PlatformCapabilityAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.Dict[str, float]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="PlatformCapabilityAgent", llm_response=llm_response, mode="request")
        return typing.cast(typing.Dict[str, float], result)

    def PrepareWorkflowData(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.WorkflowPrepopulation:
        result = self.__options.merge_options(baml_options).parse_response(function_name="PrepareWorkflowData", llm_response=llm_response, mode="request")
        return typing.cast(types.WorkflowPrepopulation, result)

    def SOWGeneratorAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SOWContract:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SOWGeneratorAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.SOWContract, result)

    def SOWInterpreterAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.DataContract:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SOWInterpreterAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.DataContract, result)

    def ScoreStrategicAlignment(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.AlignmentScore:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ScoreStrategicAlignment", llm_response=llm_response, mode="request")
        return typing.cast(types.AlignmentScore, result)

    def SecurityDecisionAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SecurityDecision:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SecurityDecisionAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.SecurityDecision, result)

    def SemanticIntegratorAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SemanticAnnotation:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SemanticIntegratorAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.SemanticAnnotation, result)

    def SourceDiscoveryAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["types.DataSourceRecommendation"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SourceDiscoveryAgent", llm_response=llm_response, mode="request")
        return typing.cast(typing.List["types.DataSourceRecommendation"], result)

    def SupervisorAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.GeneratedPipeline:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SupervisorAgent", llm_response=llm_response, mode="request")
        return typing.cast(types.GeneratedPipeline, result)

    def ValidateETKLPrinciples(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["types.ETKLPrincipleViolation"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ValidateETKLPrinciples", llm_response=llm_response, mode="request")
        return typing.cast(typing.List["types.ETKLPrincipleViolation"], result)

    

class LlmStreamParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeNotebookStructure(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.NotebookStructure:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeNotebookStructure", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.NotebookStructure, result)

    def AnalyzeSourceFitness(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.Dict[str, str]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeSourceFitness", llm_response=llm_response, mode="stream")
        return typing.cast(typing.Dict[str, str], result)

    def AnalyzeWorkStreamCoordination(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["stream_types.ETKLWorkStreamAnalysis"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeWorkStreamCoordination", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List["stream_types.ETKLWorkStreamAnalysis"], result)

    def BusinessContextAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.BusinessContext:
        result = self.__options.merge_options(baml_options).parse_response(function_name="BusinessContextAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.BusinessContext, result)

    def CheckManifestoCompliance(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["stream_types.ETKLManifestoCompliance"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CheckManifestoCompliance", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List["stream_types.ETKLManifestoCompliance"], result)

    def CongestionManagementAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["stream_types.CongestionAlert"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CongestionManagementAgent", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List["stream_types.CongestionAlert"], result)

    def CreateTargetTemplate(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.Dict[str, str]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CreateTargetTemplate", llm_response=llm_response, mode="stream")
        return typing.cast(typing.Dict[str, str], result)

    def DataFetcherAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="DataFetcherAgent", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    def DataParserAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ParsedData:
        result = self.__options.merge_options(baml_options).parse_response(function_name="DataParserAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ParsedData, result)

    def DataTransformerAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TransformationStrategy:
        result = self.__options.merge_options(baml_options).parse_response(function_name="DataTransformerAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TransformationStrategy, result)

    def DecisionSupportAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="DecisionSupportAgent", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    def DiscoverFromScratch(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.DiscoveryResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="DiscoverFromScratch", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.DiscoveryResult, result)

    def DiscoverKnownSources(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["stream_types.DataSourceMetadata"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="DiscoverKnownSources", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List["stream_types.DataSourceMetadata"], result)

    def ETKLGuruAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ETKLVisionAssessment:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ETKLGuruAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ETKLVisionAssessment, result)

    def EconomicOptimizationAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["stream_types.MarketOpportunity"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="EconomicOptimizationAgent", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List["stream_types.MarketOpportunity"], result)

    def FeasibilityAnalyzerAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.FeasibilityAnalysis:
        result = self.__options.merge_options(baml_options).parse_response(function_name="FeasibilityAnalyzerAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.FeasibilityAnalysis, result)

    def GenerateAlignmentFeedback(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.Dict[str, str]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateAlignmentFeedback", llm_response=llm_response, mode="stream")
        return typing.cast(typing.Dict[str, str], result)

    def HydrologicalRiskAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.Dict[str, types.RiskLevel]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="HydrologicalRiskAgent", llm_response=llm_response, mode="stream")
        return typing.cast(typing.Dict[str, types.RiskLevel], result)

    def JupyterStorytellerAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.StorytellingPlan:
        result = self.__options.merge_options(baml_options).parse_response(function_name="JupyterStorytellerAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.StorytellingPlan, result)

    def MultiModalOptimizationAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["stream_types.RouteOption"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="MultiModalOptimizationAgent", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List["stream_types.RouteOption"], result)

    def NavigationIntelligenceAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.NavigationRecommendation:
        result = self.__options.merge_options(baml_options).parse_response(function_name="NavigationIntelligenceAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.NavigationRecommendation, result)

    def OptimizeStoryFlow(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.StorytellingPlan:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OptimizeStoryFlow", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.StorytellingPlan, result)

    def ParseExecutiveTarget(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TargetParsingResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ParseExecutiveTarget", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TargetParsingResult, result)

    def PersonaResponseAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="PersonaResponseAgent", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    def PlatformCapabilityAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.Dict[str, float]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="PlatformCapabilityAgent", llm_response=llm_response, mode="stream")
        return typing.cast(typing.Dict[str, float], result)

    def PrepareWorkflowData(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.WorkflowPrepopulation:
        result = self.__options.merge_options(baml_options).parse_response(function_name="PrepareWorkflowData", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.WorkflowPrepopulation, result)

    def SOWGeneratorAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SOWContract:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SOWGeneratorAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SOWContract, result)

    def SOWInterpreterAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.DataContract:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SOWInterpreterAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.DataContract, result)

    def ScoreStrategicAlignment(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.AlignmentScore:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ScoreStrategicAlignment", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.AlignmentScore, result)

    def SecurityDecisionAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SecurityDecision:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SecurityDecisionAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SecurityDecision, result)

    def SemanticIntegratorAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SemanticAnnotation:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SemanticIntegratorAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SemanticAnnotation, result)

    def SourceDiscoveryAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["stream_types.DataSourceRecommendation"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SourceDiscoveryAgent", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List["stream_types.DataSourceRecommendation"], result)

    def SupervisorAgent(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.GeneratedPipeline:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SupervisorAgent", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.GeneratedPipeline, result)

    def ValidateETKLPrinciples(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.List["stream_types.ETKLPrincipleViolation"]:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ValidateETKLPrinciples", llm_response=llm_response, mode="stream")
        return typing.cast(typing.List["stream_types.ETKLPrincipleViolation"], result)

    