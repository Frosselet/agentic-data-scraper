# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

from . import types
from . import stream_types


type_map = {

    "types.AgriculturePipelineConfig": types.AgriculturePipelineConfig,
    "stream_types.AgriculturePipelineConfig": stream_types.AgriculturePipelineConfig,

    "types.BusinessContext": types.BusinessContext,
    "stream_types.BusinessContext": stream_types.BusinessContext,

    "types.CongestionAlert": types.CongestionAlert,
    "stream_types.CongestionAlert": stream_types.CongestionAlert,

    "types.DataContract": types.DataContract,
    "stream_types.DataContract": stream_types.DataContract,

    "types.DataSource": types.DataSource,
    "stream_types.DataSource": stream_types.DataSource,

    "types.DataSourceRecommendation": types.DataSourceRecommendation,
    "stream_types.DataSourceRecommendation": stream_types.DataSourceRecommendation,

    "types.FeasibilityAnalysis": types.FeasibilityAnalysis,
    "stream_types.FeasibilityAnalysis": stream_types.FeasibilityAnalysis,

    "types.GeneratedPipeline": types.GeneratedPipeline,
    "stream_types.GeneratedPipeline": stream_types.GeneratedPipeline,

    "types.MarketOpportunity": types.MarketOpportunity,
    "stream_types.MarketOpportunity": stream_types.MarketOpportunity,

    "types.NavigationRecommendation": types.NavigationRecommendation,
    "stream_types.NavigationRecommendation": stream_types.NavigationRecommendation,

    "types.ParsedData": types.ParsedData,
    "stream_types.ParsedData": stream_types.ParsedData,

    "types.RouteOption": types.RouteOption,
    "stream_types.RouteOption": stream_types.RouteOption,

    "types.RoutingRequest": types.RoutingRequest,
    "stream_types.RoutingRequest": stream_types.RoutingRequest,

    "types.SOWContract": types.SOWContract,
    "stream_types.SOWContract": stream_types.SOWContract,

    "types.SecurityDecision": types.SecurityDecision,
    "stream_types.SecurityDecision": stream_types.SecurityDecision,

    "types.SemanticAnnotation": types.SemanticAnnotation,
    "stream_types.SemanticAnnotation": stream_types.SemanticAnnotation,

    "types.SupplyChainPipelineConfig": types.SupplyChainPipelineConfig,
    "stream_types.SupplyChainPipelineConfig": stream_types.SupplyChainPipelineConfig,

    "types.TradingPipelineConfig": types.TradingPipelineConfig,
    "stream_types.TradingPipelineConfig": stream_types.TradingPipelineConfig,

    "types.TransformationStrategy": types.TransformationStrategy,
    "stream_types.TransformationStrategy": stream_types.TransformationStrategy,

    "types.VesselSpecifications": types.VesselSpecifications,
    "stream_types.VesselSpecifications": stream_types.VesselSpecifications,

    "types.WaterwayConditions": types.WaterwayConditions,
    "stream_types.WaterwayConditions": stream_types.WaterwayConditions,


    "types.NavigationPriority": types.NavigationPriority,

    "types.RiskLevel": types.RiskLevel,

    "types.TransportMode": types.TransportMode,

}