# Multi-stage Docker build for AWS Lambda with Python 3.12+ and Playwright
# Production-ready base image for Agentic Data Scraper Lambda functions

# Stage 1: Build dependencies and install Playwright browsers
FROM public.ecr.aws/lambda/python:3.12 as builder

# Set environment variables for optimal Python performance
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONPATH=/var/task

# Install system dependencies required for Playwright browsers
RUN dnf update -y && \
    dnf install -y \
        # Core system libraries
        glib2-devel \
        nss \
        nspr \
        atk \
        at-spi2-atk \
        cups-libs \
        drm \
        gtk3 \
        libxkbcommon \
        libxcomposite \
        libxdamage \
        libxrandr \
        libgbm \
        libxss \
        libasound2 \
        # Font libraries for proper text rendering
        fontconfig \
        fonts-liberation \
        fonts-noto \
        fonts-noto-cjk \
        fonts-noto-emoji \
        # Additional dependencies
        ca-certificates \
        tzdata \
        && dnf clean all

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN python -m pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Install Playwright and browsers (optimized for Lambda)
RUN pip install --no-cache-dir \
    playwright==1.40.0 \
    playwright-stealth==1.0.6 \
    && playwright install --with-deps chromium firefox webkit

# Stage 2: Runtime image with optimizations for cold start performance
FROM public.ecr.aws/lambda/python:3.12

# Set Python 3.12+ specific environment variables for performance
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/var/task \
    # Python 3.12+ performance optimizations
    PYTHONPROFILEIMPORTTIME=0 \
    PYTHONHASHSEED=0 \
    # Playwright environment variables for Lambda
    PLAYWRIGHT_BROWSERS_PATH=/var/task/browsers \
    PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 \
    # Browser configuration for headless and headed modes
    DISPLAY=:99 \
    CHROME_BIN=/var/task/browsers/chromium-1084/chrome-linux/chrome \
    # AWS Lambda optimizations
    AWS_LAMBDA_EXEC_WRAPPER=/opt/bootstrap

# Copy system dependencies from builder stage
COPY --from=builder /usr/lib64/libnss* /usr/lib64/
COPY --from=builder /usr/lib64/libnspr* /usr/lib64/
COPY --from=builder /usr/lib64/libatk* /usr/lib64/
COPY --from=builder /usr/lib64/libgtk* /usr/lib64/
COPY --from=builder /usr/lib64/libgdk* /usr/lib64/
COPY --from=builder /usr/lib64/libgio* /usr/lib64/
COPY --from=builder /usr/lib64/libgobject* /usr/lib64/
COPY --from=builder /usr/lib64/libglib* /usr/lib64/
COPY --from=builder /usr/lib64/libgbm* /usr/lib64/
COPY --from=builder /usr/lib64/libxkbcommon* /usr/lib64/
COPY --from=builder /usr/lib64/libX* /usr/lib64/
COPY --from=builder /usr/lib64/libdrm* /usr/lib64/
COPY --from=builder /usr/lib64/libxcb* /usr/lib64/
COPY --from=builder /usr/lib64/libasound* /usr/lib64/

# Copy fonts for proper text rendering
COPY --from=builder /usr/share/fonts /usr/share/fonts

# Copy Python packages and Playwright browsers
COPY --from=builder /var/lang/lib/python3.12/site-packages/ /var/lang/lib/python3.12/site-packages/
COPY --from=builder /var/task/browsers /var/task/browsers

# Create necessary directories with proper permissions
RUN mkdir -p /tmp/playwright /var/task/logs /dev/shm && \
    chmod 755 /tmp/playwright /var/task/logs && \
    # Configure shared memory for browser processes
    mount -t tmpfs -o size=512m tmpfs /dev/shm || true

# Set up Xvfb for headed browser mode (development/debugging)
COPY --from=builder /usr/bin/Xvfb /usr/bin/ || echo "Xvfb not available in base image"

# Create bootstrap script for Lambda runtime optimization
RUN cat > /opt/bootstrap << 'EOF'
#!/bin/bash
# AWS Lambda Runtime Interface Client bootstrap for Python 3.12+

# Set up virtual display for headed browser modes (if needed)
if [ "$PLAYWRIGHT_HEADED" = "true" ]; then
    Xvfb :99 -screen 0 1024x768x24 -nolisten tcp &
fi

# Pre-warm Python modules for faster cold starts
python3 -c "import asyncio, json, logging, os, sys, time, playwright" 2>/dev/null || true

# Start the Lambda Runtime Interface Client
exec /var/lang/bin/python3 -m awslambdaric $1
EOF

RUN chmod +x /opt/bootstrap

# Health check script for local development
RUN cat > /var/task/healthcheck.py << 'EOF'
#!/usr/bin/env python3
"""Health check script for Lambda container"""
import asyncio
import sys
from playwright.async_api import async_playwright

async def health_check():
    """Verify Playwright browsers are working correctly"""
    try:
        async with async_playwright() as p:
            # Test Chromium
            browser = await p.chromium.launch(headless=True)
            page = await browser.new_page()
            await page.goto('data:text/html,<h1>Health Check</h1>')
            title = await page.title()
            await browser.close()
            print(f"✓ Chromium working: {title}")
            return True
    except Exception as e:
        print(f"✗ Health check failed: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(health_check())
    sys.exit(0 if success else 1)
EOF

RUN chmod +x /var/task/healthcheck.py

# Default Lambda handler (will be overridden by generated code)
COPY lambda_function.py ${LAMBDA_TASK_ROOT}/

# Verify installation and optimize for cold starts
RUN python3 -c "import playwright; print('Playwright installation verified')" && \
    python3 -c "import asyncio; print('Python 3.12+ asyncio ready')" && \
    # Pre-compile Python modules for faster imports
    python3 -m compileall /var/lang/lib/python3.12/site-packages/playwright/ 2>/dev/null || true

# Set the Lambda handler
CMD [ "lambda_function.lambda_handler" ]

# Labels for image metadata and lifecycle management
LABEL maintainer="Agentic Data Scraper Team" \
      version="1.0.0" \
      description="AWS Lambda base image with Python 3.12+ and Playwright" \
      python.version="3.12+" \
      playwright.version="1.40.0" \
      browsers="chromium,firefox,webkit" \
      runtime="aws-lambda" \
      build.date="2025-09-04"